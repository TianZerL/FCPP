#include <atomic>
#include <cstdint>
#include <cstring>
#include <utility>

#include <SDL.h>

#include "FCPP/Util/FPSLimiter.hpp"
#include "FCPP/Util/LoopCounter.hpp"

#include "IO.hpp"

// Font from https://github.com/necronomimicon/zx-spectrum-font
constexpr std::uint32_t pixelFont[][4 * 8] = 
{
/*  0x20*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*! 0x21*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*" 0x22*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*# 0x23*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*$ 0x24*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000},
/*% 0x25*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*& 0x26*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*' 0x27*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*( 0x28*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*) 0x29*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/** 0x2a*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*+ 0x2b*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*, 0x2c*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000},
/*- 0x2d*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*. 0x2e*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*/ 0x2f*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*0 0x30*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*1 0x31*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*2 0x32*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*3 0x33*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*4 0x34*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*5 0x35*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*6 0x36*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*7 0x37*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*8 0x38*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*9 0x39*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*: 0x3a*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*; 0x3b*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*< 0x3c*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*= 0x3d*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*> 0x3e*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*? 0x3f*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*@ 0x40*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*A 0x41*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*B 0x42*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*C 0x43*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*D 0x44*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*E 0x45*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*F 0x46*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*G 0x47*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*H 0x48*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*I 0x49*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*J 0x4a*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*K 0x4b*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*L 0x4c*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*M 0x4d*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*N 0x4e*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*O 0x4f*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*P 0x50*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*Q 0x51*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*R 0x52*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*S 0x53*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*T 0x54*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*U 0x55*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*V 0x56*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*W 0x57*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*X 0x58*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*Y 0x59*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*Z 0x5a*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*[ 0x5b*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*\ 0x5c*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*] 0x5d*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*^ 0x5e*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*_ 0x5f*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000},
/*` 0x60*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*a 0x61*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*b 0x62*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*c 0x63*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*d 0x64*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*e 0x65*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*f 0x66*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*g 0x67*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*h 0x68*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*i 0x69*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*j 0x6a*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*k 0x6b*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*l 0x6c*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*m 0x6d*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*n 0x6e*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*o 0x6f*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*p 0x70*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*q 0x71*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*r 0x72*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*s 0x73*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*t 0x74*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*u 0x75*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*v 0x76*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*w 0x77*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*x 0x78*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*y 0x79*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*z 0x7a*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*{ 0x7b*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*| 0x7c*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*} 0x7d*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000},
/*~ 0x7e*/ {0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xff000000,0xffffffff,0xffffffff,0xff000000,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000}
};

class Audio : public fcpp::core::SampleBuffer
{
public:
    static Audio& instance() noexcept;
public:
    Audio() noexcept;
    ~Audio() noexcept override;

    void sendSample(double sample) noexcept override;
    int getSampleRate() noexcept override;
    void fillBuffer(std::uint8_t* buffer, int len) noexcept;
    static void callback(void* data, std::uint8_t* buffer, int len) noexcept;
private:
    static constexpr int sampleRate = 44100;
    static constexpr std::size_t buffSize = 1024;
    static constexpr std::size_t buffNum = 6;

    SDL_AudioDeviceID devid = 0;
    std::size_t count = 0;
    std::atomic_size_t frames = 0;
    fcpp::util::LoopCounter<std::size_t> readIdx{ buffNum - 1 }, writeIdx{ buffNum - 1 };
    std::int16_t samples[buffSize * buffNum]{};
};

inline Audio& Audio::instance() noexcept
{
    static Audio audio{};
    return audio;
}
Audio::Audio() noexcept
{
    if (SDL_Init(SDL_INIT_AUDIO) != 0)
    {
        SDL_Log("SDL_INIT_AUDIO Error: %s\n", SDL_GetError());
        return;
    }

    SDL_AudioSpec want{};
    SDL_zero(want);
    want.freq = sampleRate;
    want.format = AUDIO_S16SYS;
    want.channels = 1;
    want.samples = buffSize;
    want.callback = callback;
    want.userdata = this;
    devid = SDL_OpenAudioDevice(nullptr, 0, &want, nullptr, 0);
    if (devid == 0)
    {
        SDL_Log("SDL_OpenAudioDevice Error: %s\n", SDL_GetError());
        return;
    }

    SDL_PauseAudioDevice(devid, 0);
}
Audio::~Audio() noexcept
{
    if (devid != 0)
    {
        SDL_PauseAudioDevice(devid, 1);
        SDL_CloseAudioDevice(devid);
    }
}
void Audio::sendSample(const double sample) noexcept
{
    if (frames < buffNum)
    {
        samples[writeIdx * buffSize + count++] = static_cast<std::int16_t>(sample * 32767);
        if (count >= buffSize)
        {
            count = 0;
            ++writeIdx;
            ++frames;
        }
    }
}
int Audio::getSampleRate() noexcept
{
    return sampleRate;
}
inline void Audio::fillBuffer(std::uint8_t* const buffer, const int len) noexcept
{
    if (frames)
    {
        SDL_memcpy(buffer, samples + readIdx * buffSize, len);
        ++readIdx;
        --frames;
    }
    else SDL_memset(buffer, 0, len);
}
void Audio::callback(void* const data, std::uint8_t* const buffer, const int len) noexcept
{
    static_cast<Audio*>(data)->fillBuffer(buffer, len);
}

class Input : public fcpp::core::InputScanner
{
public:
    static Input& instance() noexcept;
public:
    ~Input() override = default;

    std::uint8_t scan() noexcept override;
    fcpp::core::JoypadType getJoypadType() noexcept override;
private:
    const Uint8* keyState = SDL_GetKeyboardState(nullptr);
};

inline Input& Input::instance() noexcept
{
    static Input input{};
    return input;
}
std::uint8_t Input::scan() noexcept
{
    return 
        keyState[SDL_SCANCODE_A] << fcpp::core::StandardJoypad::Buttons::A |
        keyState[SDL_SCANCODE_S] << fcpp::core::StandardJoypad::Buttons::B |
        keyState[SDL_SCANCODE_X] << fcpp::core::StandardJoypad::Buttons::SELECT |
        keyState[SDL_SCANCODE_Z] << fcpp::core::StandardJoypad::Buttons::START |
        keyState[SDL_SCANCODE_UP] << fcpp::core::StandardJoypad::Buttons::UP |
        keyState[SDL_SCANCODE_DOWN] << fcpp::core::StandardJoypad::Buttons::DOWN |
        keyState[SDL_SCANCODE_LEFT] << fcpp::core::StandardJoypad::Buttons::LEFT |
        keyState[SDL_SCANCODE_RIGHT] << fcpp::core::StandardJoypad::Buttons::RIGHT;
}
fcpp::core::JoypadType Input::getJoypadType() noexcept
{
    return fcpp::core::JoypadType::Standard;
}

class Video : public fcpp::core::FrameBuffer
{
public:
    static Video& instance(const std::uint32_t* patternBuffer,
        std::function<void(int)> keyPressCallback,
        std::function<void(const char** text)> updateCallback,
        std::function<void()> closeCallback) noexcept;
public:
    Video() noexcept;
    ~Video() noexcept override;

    void setPixel(int x, int y, std::uint32_t color) noexcept override;
    void completedSignal() noexcept override;
    const std::uint32_t* getPaletteTable() noexcept override;
    void updateRect() noexcept;
    void drawText(const char* text) noexcept;
    void render() noexcept;
private:
    int width = (256 + 128) * 2, height = 256 * 2;
    const std::uint32_t* patternBuffer;
    std::uint32_t screenBuffer[256 * 240]{}, textBuffer[256 * 16]{};
    SDL_Rect screenRect{}, patternRect{}, textRect{};
    SDL_Window* window = nullptr;
    SDL_Renderer* renderer = nullptr;
    SDL_Texture* screenTexture = nullptr, * patternTexture = nullptr,* textTexture = nullptr;
    fcpp::util::AdaptiveFPSLimiter fpsLimiter{ 60.0 };

    std::function<void(int)> keyPressCallback;
    std::function<void(const char** text)> updateCallback;
    std::function<void()> closeCallback;
};

inline Video& Video::instance(const std::uint32_t* const patternBuffer = nullptr,
    const std::function<void(int)> keyPressCallback = nullptr,
    const std::function<void(const char** text)> updateCallback = nullptr,
    const std::function<void()> closeCallback = nullptr) noexcept
{
    static Video video{};
    if(patternBuffer != nullptr) video.patternBuffer = patternBuffer;
    if(keyPressCallback != nullptr) video.keyPressCallback = std::move(keyPressCallback);
    if(updateCallback != nullptr) video.updateCallback = std::move(updateCallback);
    if(closeCallback != nullptr) video.closeCallback = std::move(closeCallback);
    return video;
}
Video::Video() noexcept
{
    if (SDL_Init(SDL_INIT_VIDEO) != 0)
    {
        SDL_Log("SDL_INIT_VIDEO Error: %s\n", SDL_GetError());
        return;
    }

    window = SDL_CreateWindow("FCPP Debugger Test", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height,
        SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);
    if (window == nullptr)
    {
        SDL_Log("SDL_CreateWindow Error: %s\n", SDL_GetError());
        return;
    }
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr)
    {
        SDL_Log("SDL_CreateRenderer Error: %s\n", SDL_GetError());
        return;
    }
    screenTexture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_STREAMING, 256, 240);
    if (screenTexture == nullptr)
    {
        SDL_Log("SDL_CreateTexture Error: %s\n", SDL_GetError());
        return;
    }
    patternTexture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_STREAMING, 128, 256);
    if (patternTexture == nullptr)
    {
        SDL_Log("SDL_CreateTexture Error: %s\n", SDL_GetError());
        return;
    }
    textTexture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_STREAMING, 256, 16);
    if (textTexture == nullptr)
    {
        SDL_Log("SDL_CreateTexture Error: %s\n", SDL_GetError());
        return;
    }

    updateRect();
}
Video::~Video() noexcept
{
    if (patternTexture != nullptr) SDL_DestroyTexture(patternTexture);
    if (screenTexture != nullptr) SDL_DestroyTexture(screenTexture);
    if (textTexture != nullptr) SDL_DestroyTexture(textTexture);
    if (renderer != nullptr) SDL_DestroyRenderer(renderer);
    if (window != nullptr) SDL_DestroyWindow(window);
}
void Video::setPixel(const int x, const int y, const std::uint32_t color) noexcept
{
    screenBuffer[256 * y + x] = color;
}
void Video::completedSignal() noexcept
{
    const char* text = nullptr;
    updateCallback(&text);
    drawText(text);
    render();
}
const std::uint32_t* Video::getPaletteTable() noexcept
{
    return nullptr;
}
inline void Video::updateRect() noexcept
{
    int screenHeight = height - height * 16 / 256;
    int screenWidth = width * 2 / 3;
    int patternHeight = height;
    int patternWidth = width - screenWidth;
    int textHeight = height - screenHeight;
    int textWidth = screenWidth;

    screenRect = { 0, 0, screenWidth , screenHeight };
    patternRect = { screenWidth, 0, patternWidth , patternHeight };
    textRect = { 0, screenHeight, textWidth , textHeight };
}
inline void Video::drawText(const char* text) noexcept
{
    int count =  0;
    const char* p = text;
    std::memset(textBuffer, 0, sizeof(textBuffer));
    while(*p != '\0' && count < 64)
    {
        if (*p >= 0x20 && *p <= 0x7e)
        {
            char c = *p - 0x20;
            int offset = count * 4;
            for(int i = 0; i < 8; i++)
                for(int j = 0; j < 4; j++) textBuffer[i * 256 + j + offset] = pixelFont[c][i * 4 + j];
        }
        if (*p++ == '\n') break;
        count++;
    }
    count =  0;
    while(*p != '\0' && *p != '\n' && count < 64)
    {
        if (*p >= 0x20 && *p <= 0x7e)
        {
            char c = *p - 0x20;
            int offset = count * 4;
            for(int i = 0; i < 8; i++)
                for(int j = 0; j < 4; j++) textBuffer[256 * 8 + i * 256 + j + offset] = pixelFont[c][i * 4 + j];
        }
        p++;
        count++;
    }
}
inline void Video::render() noexcept
{
    SDL_Event event{};
    while (SDL_PollEvent(&event))
    {
        switch (event.type)
        {
        case SDL_QUIT:
            closeCallback();
            break;
        case SDL_KEYDOWN:
            keyPressCallback(event.key.keysym.scancode);
            break;
        case SDL_WINDOWEVENT:
            if (event.window.event == SDL_WINDOWEVENT_RESIZED)
            {
                width = event.window.data1;
                height = event.window.data2;
                updateRect();
            }
            break;
        }
    }

    if (SDL_UpdateTexture(screenTexture, nullptr, screenBuffer, 256 * sizeof(std::uint32_t)) != 0) SDL_Log("SDL_UpdateTexture Error: %s\n", SDL_GetError());
    if (SDL_UpdateTexture(patternTexture, nullptr, patternBuffer, 128 * sizeof(std::uint32_t)) != 0) SDL_Log("SDL_UpdateTexture Error: %s\n", SDL_GetError());
    if (SDL_UpdateTexture(textTexture, nullptr, textBuffer, 256 * sizeof(std::uint32_t)) != 0) SDL_Log("SDL_UpdateTexture Error: %s\n", SDL_GetError());
    if (SDL_RenderClear(renderer) != 0) SDL_Log("SDL_RenderClear Error: %s\n", SDL_GetError());
    if (SDL_RenderCopy(renderer, screenTexture, nullptr, &screenRect) != 0) SDL_Log("SDL_RenderCopy Error: %s\n", SDL_GetError());
    if (SDL_RenderCopy(renderer, patternTexture, nullptr, &patternRect) != 0) SDL_Log("SDL_RenderCopy Error: %s\n", SDL_GetError());
    if (SDL_RenderCopy(renderer, textTexture, nullptr, &textRect) != 0) SDL_Log("SDL_RenderCopy Error: %s\n", SDL_GetError());
    SDL_RenderPresent(renderer);

    fpsLimiter.wait();
}

Controller& Controller::instance() noexcept
{
    static Controller controller{};
    return controller;
}

Controller::Controller() noexcept
{
    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO) != 0) SDL_Log("SDL_Init Error: %s\n", SDL_GetError());
}
Controller::~Controller() noexcept
{
    SDL_Quit();
}

fcpp::core::FrameBuffer* Controller::getFrameBuffer(const std::uint32_t* const patternBuffer,
    const std::function<void(int)> keyPressCallback,
    const std::function<void(const char** text)> updateCallback,
    const std::function<void()> closeCallback) noexcept
{
    return &Video::instance(patternBuffer, std::move(keyPressCallback), std::move(updateCallback), std::move(closeCallback));
}
fcpp::core::InputScanner* Controller::getInputScanner() noexcept
{
    return &Input::instance();
}
fcpp::core::SampleBuffer* Controller::getSampleBuffer() noexcept
{
    return &Audio::instance();
}

void Controller::update() noexcept
{
    Video::instance().completedSignal();
}
