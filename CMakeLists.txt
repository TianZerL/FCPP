cmake_minimum_required(VERSION 3.13)
project(FCPP LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(TOP_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_INSTALL_PREFIX ${TOP_DIR}/install)

if(NOT CMAKE_BUILD_TYPE)
    message(STATUS "No build type selected, default to Release")
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build Type" FORCE)
endif()

string(TIMESTAMP TODAY "%Y-%m-%d")

option(FCPP_CORE_SHARED_LIB "fcpp core shared library support" OFF)
option(FCPP_IO_SHARED_LIB "fcpp io shared library support" OFF)
option(FCPP_IO_WITH_SFML2 "build fcpp io lib with sfml2" OFF)
option(FCPP_IO_WITH_SDL2 "build fcpp io lib with sdl2" ON)
option(FCPP_IO_WITH_RAYLIB "build fcpp io lib with raylib" OFF)
option(FCPP_BUILD_CLI "build tfcpp" ON)
option(FCPP_BUILD_GUI "build qfcpp" ON)
option(FCPP_BUILD_TEST_CORE "build test for core" OFF)
option(FCPP_BUILD_TEST_WASM "build test for wasm" OFF)
option(FCPP_BUILD_C_BINDING "build C bingding" OFF)
option(FCPP_BUILD_PYTHON_BINDING "build Python bingding" OFF)
option(FCPP_BUILD_WASM "build efcpp" OFF)
option(FCPP_LTO "enable LTO" OFF)

if(FCPP_EMSCRIPTEN_PRESET)
    if(NOT EMSCRIPTEN)
        message(FATAL_ERROR "Must use Emscripten to compile efcpp")
    endif()
    set(FCPP_BUILD_WASM ON)
    set(FCPP_BUILD_TEST_WASM ON)
    set(FCPP_IO_WITH_SFML2 OFF)
    set(FCPP_IO_WITH_SDL2 OFF)
    set(FCPP_IO_WITH_RAYLIB OFF)
    set(FCPP_BUILD_CLI OFF)
    set(FCPP_BUILD_GUI OFF)
    set(FCPP_BUILD_C_BINDING OFF)
    set(FCPP_BUILD_PYTHON_BINDING OFF)
endif()

if(FCPP_LTO)
    include(CheckIPOSupported)
    check_ipo_supported(RESULT LTO_CHECK OUTPUT LTO_ERROR)

    if(LTO_CHECK)
        message(STATUS "LTO enabled")
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
    else()
        message(STATUS "LTO not supported: ${LTO_ERROR}")
    endif()
endif()

# third-party
if(FCPP_IO_WITH_SFML2)
    find_package(SFML 2 COMPONENTS graphics audio window REQUIRED)
endif()
if(FCPP_IO_WITH_SDL2 OR (FCPP_BUILD_WASM AND NOT EMSCRIPTEN))
    find_package(SDL2 REQUIRED)
endif()
if(FCPP_IO_WITH_RAYLIB)
    find_package(raylib QUIET)
    if (NOT raylib_FOUND)
        include(FetchContent)
        FetchContent_Declare(
            raylib
            GIT_REPOSITORY https://github.com/raysan5/raylib
        )
        FetchContent_GetProperties(raylib)
        if (NOT raylib_POPULATED)
            FetchContent_Populate(raylib)
            set(BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
            add_subdirectory(${raylib_SOURCE_DIR} ${raylib_BINARY_DIR})
        endif()
    endif()
endif()

add_subdirectory(core)
add_subdirectory(io)
add_subdirectory(util)
add_subdirectory(bind)
add_subdirectory(test)
if(FCPP_BUILD_CLI)
    add_subdirectory(cli)
endif()
if(FCPP_BUILD_GUI)
    add_subdirectory(gui)
endif()
if(FCPP_BUILD_WASM)
    add_subdirectory(wasm)
endif()
