#include <tuple>

#include <pybind11/pybind11.h>
#include <pybind11/functional.h>

#include "FCPP/IO.hpp"

namespace py = pybind11;

template<typename Controller>
void classController(const py::module_& m, const char* const name)
{
    py::class_<Controller>(m, name)
        .def(py::init())
        .def("create", &Controller::create)
        .def("get_frame_buffer", &Controller::getFrameBuffer, py::return_value_policy::reference_internal)
        .def("get_input_scanner", &Controller::getInputScanner, py::return_value_policy::reference_internal)
        .def("get_sample_buffer", &Controller::getSampleBuffer, py::return_value_policy::reference_internal)
        .def("render", &Controller::render)
        .def("set_full_screen", &Controller::setFullScreen, py::arg("enable"))
        .def("set_borderless", &Controller::setBorderless, py::arg("enable"))
        .def("set_vertical_sync", &Controller::setVerticalSync, py::arg("enable"))
        .def("set_render_driver", &Controller::setRenderDriver, py::arg("index"))
        .def("set_joystick_port", &Controller::setJoystickPort, py::arg("index"), py::arg("port"))
        .def("set_scale", &Controller::setScale, py::arg("factor"))
        .def("set_title", &Controller::setTitle, py::arg("text"))
        .def("set_fps_limit", &Controller::setFPSLimit, py::arg("fps"))
        .def("set_volume", &Controller::setVolume, py::arg("volume"))
        .def("set_sample_rate", &Controller::setSampleRate, py::arg("rate"))
        .def("set_joypad_type", &Controller::setJoypadType, py::arg("index"), py::arg("type"))
        .def("set_palette_table", py::overload_cast<const fcpp::io::PaletteTable&>(&Controller::setPaletteTable), py::arg("palette_table"))
        .def("set_turbo_button_speed", &Controller::setTurboButtonSpeed, py::arg("index"), py::arg("value"))
        .def("bind", py::overload_cast<int, int, fcpp::io::Keyboard>(&Controller::bind), py::arg("index"), py::arg("standard_button_idx"), py::arg("key"))
        .def("bind", py::overload_cast<int, int, fcpp::io::Joystick>(&Controller::bind), py::arg("index"), py::arg("standard_button_idx"), py::arg("button"))
        .def("set_key_press_callback", &Controller::setKeyPressCallback, py::arg("callback"))
        .def("set_frame_complete_callback", &Controller::setFrameCompleteCallback, py::arg("callback"))
        .def("set_render_callback", &Controller::setRenderCallback, py::arg("callback"))
        .def("set_close_callback", &Controller::setCloseCallback, py::arg("callback"));
}

void initIOModule(const py::module_& m)
{
    m.doc() = "fcpp io";

    py::enum_<fcpp::io::Keyboard>(m, "Keyboard")
        .value("A", fcpp::io::Keyboard::A)
        .value("B", fcpp::io::Keyboard::B)
        .value("C", fcpp::io::Keyboard::C)
        .value("D", fcpp::io::Keyboard::D)
        .value("E", fcpp::io::Keyboard::E)
        .value("F", fcpp::io::Keyboard::F)
        .value("G", fcpp::io::Keyboard::G)
        .value("H", fcpp::io::Keyboard::H)
        .value("I", fcpp::io::Keyboard::I)
        .value("J", fcpp::io::Keyboard::J)
        .value("K", fcpp::io::Keyboard::K)
        .value("L", fcpp::io::Keyboard::L)
        .value("M", fcpp::io::Keyboard::M)
        .value("N", fcpp::io::Keyboard::N)
        .value("O", fcpp::io::Keyboard::O)
        .value("P", fcpp::io::Keyboard::P)
        .value("Q", fcpp::io::Keyboard::Q)
        .value("R", fcpp::io::Keyboard::R)
        .value("S", fcpp::io::Keyboard::S)
        .value("T", fcpp::io::Keyboard::T)
        .value("U", fcpp::io::Keyboard::U)
        .value("V", fcpp::io::Keyboard::V)
        .value("W", fcpp::io::Keyboard::W)
        .value("X", fcpp::io::Keyboard::X)
        .value("Y", fcpp::io::Keyboard::Y)
        .value("Z", fcpp::io::Keyboard::Z)
        .value("Num0", fcpp::io::Keyboard::Num0)
        .value("Num1", fcpp::io::Keyboard::Num1)
        .value("Num2", fcpp::io::Keyboard::Num2)
        .value("Num3", fcpp::io::Keyboard::Num3)
        .value("Num4", fcpp::io::Keyboard::Num4)
        .value("Num5", fcpp::io::Keyboard::Num5)
        .value("Num6", fcpp::io::Keyboard::Num6)
        .value("Num7", fcpp::io::Keyboard::Num7)
        .value("Num8", fcpp::io::Keyboard::Num8)
        .value("Num9", fcpp::io::Keyboard::Num9)
        .value("Escape", fcpp::io::Keyboard::Escape)
        .value("LControl", fcpp::io::Keyboard::LControl)
        .value("LShift", fcpp::io::Keyboard::LShift)
        .value("LAlt", fcpp::io::Keyboard::LAlt)
        .value("System", fcpp::io::Keyboard::System)
        .value("RControl", fcpp::io::Keyboard::RControl)
        .value("RShift", fcpp::io::Keyboard::RShift)
        .value("RAlt", fcpp::io::Keyboard::RAlt)
        .value("Menu", fcpp::io::Keyboard::Menu)
        .value("LBracket", fcpp::io::Keyboard::LBracket)
        .value("RBracket", fcpp::io::Keyboard::RBracket)
        .value("Semicolon", fcpp::io::Keyboard::Semicolon)
        .value("Comma", fcpp::io::Keyboard::Comma)
        .value("Period", fcpp::io::Keyboard::Period)
        .value("Quote", fcpp::io::Keyboard::Quote)
        .value("Slash", fcpp::io::Keyboard::Slash)
        .value("Backslash", fcpp::io::Keyboard::Backslash)
        .value("Tilde", fcpp::io::Keyboard::Tilde)
        .value("Equal", fcpp::io::Keyboard::Equal)
        .value("Hyphen", fcpp::io::Keyboard::Hyphen)
        .value("Space", fcpp::io::Keyboard::Space)
        .value("Enter", fcpp::io::Keyboard::Enter)
        .value("Backspace", fcpp::io::Keyboard::Backspace)
        .value("Tab", fcpp::io::Keyboard::Tab)
        .value("PageUp", fcpp::io::Keyboard::PageUp)
        .value("PageDown", fcpp::io::Keyboard::PageDown)
        .value("End", fcpp::io::Keyboard::End)
        .value("Home", fcpp::io::Keyboard::Home)
        .value("Insert", fcpp::io::Keyboard::Insert)
        .value("Delete", fcpp::io::Keyboard::Delete)
        .value("Add", fcpp::io::Keyboard::Add)
        .value("Subtract", fcpp::io::Keyboard::Subtract)
        .value("Multiply", fcpp::io::Keyboard::Multiply)
        .value("Divide", fcpp::io::Keyboard::Divide)
        .value("Left", fcpp::io::Keyboard::Left)
        .value("Right", fcpp::io::Keyboard::Right)
        .value("Up", fcpp::io::Keyboard::Up)
        .value("Down", fcpp::io::Keyboard::Down)
        .value("Numpad0", fcpp::io::Keyboard::Numpad0)
        .value("Numpad1", fcpp::io::Keyboard::Numpad1)
        .value("Numpad2", fcpp::io::Keyboard::Numpad2)
        .value("Numpad3", fcpp::io::Keyboard::Numpad3)
        .value("Numpad4", fcpp::io::Keyboard::Numpad4)
        .value("Numpad5", fcpp::io::Keyboard::Numpad5)
        .value("Numpad6", fcpp::io::Keyboard::Numpad6)
        .value("Numpad7", fcpp::io::Keyboard::Numpad7)
        .value("Numpad8", fcpp::io::Keyboard::Numpad8)
        .value("Numpad9", fcpp::io::Keyboard::Numpad9)
        .value("F1", fcpp::io::Keyboard::F1)
        .value("F2", fcpp::io::Keyboard::F2)
        .value("F3", fcpp::io::Keyboard::F3)
        .value("F4", fcpp::io::Keyboard::F4)
        .value("F5", fcpp::io::Keyboard::F5)
        .value("F6", fcpp::io::Keyboard::F6)
        .value("F7", fcpp::io::Keyboard::F7)
        .value("F8", fcpp::io::Keyboard::F8)
        .value("F9", fcpp::io::Keyboard::F9)
        .value("F10", fcpp::io::Keyboard::F10)
        .value("F11", fcpp::io::Keyboard::F11)
        .value("F12", fcpp::io::Keyboard::F12)
        .value("Pause", fcpp::io::Keyboard::Pause)
        .value("Unknown", fcpp::io::Keyboard::Unknown);

    py::enum_<fcpp::io::Joystick>(m, "Joystick")
        .value("Button0", fcpp::io::Joystick::Button0)
        .value("Button1", fcpp::io::Joystick::Button1)
        .value("Button2", fcpp::io::Joystick::Button2)
        .value("Button3", fcpp::io::Joystick::Button3)
        .value("Button4", fcpp::io::Joystick::Button4)
        .value("Button5", fcpp::io::Joystick::Button5)
        .value("Button6", fcpp::io::Joystick::Button6)
        .value("Button7", fcpp::io::Joystick::Button7)
        .value("Button8", fcpp::io::Joystick::Button8)
        .value("Button9", fcpp::io::Joystick::Button9)
        .value("Button10", fcpp::io::Joystick::Button10)
        .value("Up", fcpp::io::Joystick::Up)
        .value("Down", fcpp::io::Joystick::Down)
        .value("Left", fcpp::io::Joystick::Left)
        .value("Right", fcpp::io::Joystick::Right)
        .value("Axis0P", fcpp::io::Joystick::Axis0P)
        .value("Axis0N", fcpp::io::Joystick::Axis0N)
        .value("Axis1P", fcpp::io::Joystick::Axis1P)
        .value("Axis1N", fcpp::io::Joystick::Axis1N)
        .value("Axis2P", fcpp::io::Joystick::Axis2P)
        .value("Axis2N", fcpp::io::Joystick::Axis2N)
        .value("Axis3P", fcpp::io::Joystick::Axis3P)
        .value("Axis3N", fcpp::io::Joystick::Axis3N)
        .value("Axis4P", fcpp::io::Joystick::Axis4P)
        .value("Axis5P", fcpp::io::Joystick::Axis5P);

    py::class_<fcpp::io::PaletteTable>(m, "PaletteTable")
        .def(py::init())
        .def("set", py::overload_cast<int, std::uint8_t, std::uint8_t, std::uint8_t>(&fcpp::io::PaletteTable::set), py::arg("index"), py::arg("r"), py::arg("g"), py::arg("b"))
        .def("set", py::overload_cast<int, std::uint32_t>(&fcpp::io::PaletteTable::set), py::arg("index"), py::arg("argb"))
        .def("get", [](fcpp::io::PaletteTable& object, int idx) -> std::tuple<std::uint8_t, std::uint8_t, std::uint8_t>
            {
                std::uint8_t r = 0, g = 0, b = 0;
                object.get(idx, r, g, b);
                return std::make_tuple(r, g, b);
            }, py::arg("index"))
        .def("get", py::overload_cast<int>(&fcpp::io::PaletteTable::get), py::arg("index"))
        .def("save", &fcpp::io::PaletteTable::save, py::arg("path"))
        .def("load", &fcpp::io::PaletteTable::load, py::arg("path"));

#ifdef FCPP_IO_SDL2
    classController<fcpp::io::SDL2Controller>(m, "SDL2Controller");
#endif
#ifdef FCPP_IO_SFML2
    classController<fcpp::io::SFML2Controller>(m, "SFML2Controller");
#endif
}
